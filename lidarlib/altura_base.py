
from gvsig import *
from gvsig.geom import *
from gvsig.libs.timeit import timeit
from statistics_port import mean, median, median_grouped, stdev, pvariance, variance


def extraer_altura_base(listPoints, method):
    #m1 = mean(listPoints)
    m2 = median(listPoints)
    #m3 = median_grouped(listPoints)
    #m4 = stdev(listPoints)
    #m5 = pvariance(listPoints, m1) #de la media
    #m6 = variance(listPoints, m1)
    #m7 = max(listPoints)
    #m8 = min(listPoints)
    #print "Mean: ", m1
    #print "Median: ", m2
    #print "Median Grouped: ", m3
    #print "Stdev: ", m4
    #print "Pvariance: ", m5
    #print "Variance: ", m6
    #print "Max: ", m7, "Min: ", m8, "mean: ", (m7+m8)/2
    if method=="MEDIAN":
        return m2
    pass

    
@timeit
def altura_base(lyrBase, lyrPoints):
    print "====== ALTURA BASE ======= "
    schema = createSchema()
    schema.append("ID","INTEGER",10)
    schema.append("COUNT", "INTEGER",10)
    schema.append("HEIGHT", "DOUBLE",10)
    schema.append("GEOMETRY", "GEOMETRY")
    schema.get("GEOMETRY").setGeometryType(POLYGON, D2)
    shpBuff = createShape(schema, prefixname="shpBuff")
    shpBase = createShape(schema, prefixname="shpBase")
    shpBuff.edit()
    shpBase.edit()
    fBase = lyrBase.features()
    size = fBase.getSize()
    fPoints = lyrPoints.features()
    icount = 0
    for f in fBase:
        icount += 1
        gf = f.geometry()
        buff5 = f.geometry().buffer(6)
        buff1 = f.geometry().buffer(1)
        buffend = buff5.difference(buff1)
        n = 0
        t = list()
        for i in fPoints:
            gi = i.geometry()
            if gi.intersects(buffend):
                t.append(i.Z)
                n+=1
        try:
            method = extraer_altura_base(t, "MEDIAN")
        except:
            method = 99999
        #print "ID BASE: ", f.ID, icount, " Median: ", method, "n for median: ", n , "total features: ", size, "id base count: ", icount
        shpBuff.append(ID=f.ID,COUNT=n, HEIGHT=method, GEOMETRY=buffend)
        shpBase.append(ID=f.ID,COUNT=n, HEIGHT=method, GEOMETRY=gf)
                
    shpBuff.commit()
    shpBase.commit()
    #currentView().addLayer(shpBase)
    #currentView().addLayer(shpBuff)
    return shpBase

@timeit
def main(*args):
    """ Calcular la altura media de la base de un edificio"""
    #lyrBase = currentView().getLayer("base_buildings")
    #lyrPointsGround = currentView().getLayer("mestalla_ground")
    #base = altura_base(lyrBase, lyrPointsGround)
    #listapuntos = [19.16, 18.09, 17.24, 10.95, 14.08, 14.73, 18.59, 15.43, 16.02, 15.38, 16.89, 11.04, 14.04, 11.19, 11.14, 14.24, 11.09, 11.1, 14.86, 14.04, 15.38, 11.02, 16.28, 17.12, 19.1, 10.48, 10.47, 10.47, 10.37, 10.55, 10.58, 10.53, 11.0, 10.9, 10.96, 11.04, 11.02, 10.88, 10.96, 11.0, 10.99, 10.97, 11.05, 11.04, 19.36, 16.51, 17.05, 11.01, 11.04, 19.23, 19.77, 18.27, 16.96, 11.0, 11.09, 18.73, 18.0, 17.23, 17.84, 17.17, 10.9, 10.88, 10.92, 10.88, 10.9, 10.89, 10.94, 16.0, 10.93, 10.93, 11.04, 10.88, 10.92, 14.86, 15.21, 14.62, 14.33, 13.55, 13.91, 14.02, 14.61, 14.97, 17.15, 16.77, 10.91, 18.19, 16.41, 16.02, 10.94, 19.05, 10.92, 14.97, 10.96, 10.96, 18.32, 17.01, 11.23, 16.84, 16.37, 16.62, 15.24, 15.85, 14.57, 15.85, 14.52, 14.87, 15.63, 10.91, 10.91, 15.93, 16.62, 14.99, 16.16, 16.5, 16.3, 16.18, 16.21, 14.8, 15.34, 16.46, 15.65, 20.05, 12.8, 11.0, 15.83, 10.86, 10.91, 10.93, 10.9, 14.7, 10.91, 15.26, 17.96, 15.72, 16.51, 15.93, 10.9, 18.87, 17.07, 13.94, 14.18, 12.85, 16.02, 12.2, 10.4, 11.79, 10.36, 11.23, 11.27, 10.48, 10.42, 10.53, 10.52, 10.44, 11.93, 10.35, 10.29, 10.43, 10.46, 11.83, 10.49, 10.47, 10.46, 10.5, 10.33, 11.43, 10.27, 10.27, 11.58, 11.5, 10.34, 11.02, 11.01, 10.83, 10.86, 10.93, 10.96, 10.87, 10.89, 10.97, 10.92, 11.05, 10.96, 10.99, 10.91, 10.96, 10.81, 10.81, 10.93, 10.95, 10.89, 10.94, 19.74, 10.88, 10.89, 10.88, 10.83, 10.89, 10.91, 10.84, 10.86, 10.93, 10.93, 10.85, 10.91, 10.95, 10.88, 10.95, 10.96, 10.74, 10.79, 10.81, 10.79, 10.92, 10.92, 10.78, 10.81, 10.85, 10.74, 10.82, 10.82, 18.02, 10.79, 10.8, 10.84, 10.91, 10.77, 10.85, 10.86, 10.79, 10.91, 10.93, 10.83, 10.9, 10.83, 10.72, 10.69, 10.78, 10.74, 17.75, 10.79, 10.78, 17.96, 10.73, 10.77, 11.09, 13.5, 11.06, 13.57, 12.28, 13.83, 13.92, 16.16, 13.91, 13.92, 16.24, 14.01, 14.1, 11.06, 13.62, 13.6, 10.99, 13.56, 15.21, 13.92, 13.9, 16.73, 14.84, 13.95, 11.07, 14.47, 11.08, 11.11, 14.5, 11.07, 11.09, 11.07, 13.84, 11.05, 11.06, 11.09, 11.08, 11.07, 13.13, 10.98, 10.49, 10.51, 10.44, 10.57, 10.59, 11.64, 14.55, 16.64, 18.8, 18.65, 17.71, 17.03, 11.78, 18.67, 20.21, 17.5, 19.12, 15.96, 17.45, 10.43, 10.6, 16.94, 10.51, 10.81, 10.79, 14.79, 10.69, 10.81, 10.82, 10.72, 10.73, 10.76, 10.79, 10.85, 10.76, 10.86, 10.78, 10.81, 10.82, 10.86, 10.85, 10.68, 10.77, 10.76, 10.72, 10.81, 10.84, 10.79, 10.63, 10.72, 10.76, 10.66, 10.75, 10.74, 10.8, 10.73, 10.77, 10.81, 10.68, 10.77, 10.78, 16.5, 10.71, 10.79, 10.79, 16.21, 15.06, 10.77, 20.49, 10.72, 10.68, 10.74, 21.22, 21.75, 10.72, 21.45, 21.22, 19.21, 10.73, 21.3, 19.94, 19.93, 10.76, 20.37, 10.76, 10.75, 10.74, 10.65, 10.71, 10.72, 10.63, 10.71, 10.76, 10.62, 10.6, 13.55, 10.65, 14.15, 10.68, 10.73, 10.63, 10.68, 14.96, 10.49, 10.53, 10.51, 10.42, 11.59, 11.63, 11.42, 17.44, 16.78, 16.73, 20.58, 20.14, 18.98, 20.36, 17.2, 15.48, 17.28, 20.17, 10.68, 10.71, 20.24, 18.85, 10.64, 10.68, 10.73, 10.59, 10.67, 10.72, 10.68, 10.74, 10.62, 10.67, 10.72, 10.74, 10.71, 10.67, 10.58, 10.72, 10.7, 10.6, 10.63, 10.66, 15.21, 10.63, 10.66, 10.64, 14.98, 10.62, 10.65, 10.68, 10.59, 10.67, 10.71, 10.55, 10.58, 10.7, 10.61, 10.66, 10.69, 19.12, 16.18, 10.6, 10.6, 15.3, 10.52, 10.61, 15.96, 10.65, 10.5, 10.68, 10.57, 10.66, 15.69, 10.65, 10.67, 10.56, 10.6, 10.67, 10.67, 10.57, 10.63, 10.68, 10.54, 10.62, 10.69, 17.28, 10.54, 17.33, 18.27, 10.52, 19.3, 10.53, 16.21, 10.59, 11.83, 16.14, 14.6, 15.77, 11.36, 15.67, 11.13, 15.41, 10.47, 10.47, 16.26, 11.85, 10.43, 11.79, 11.2, 10.37, 15.87, 11.37, 10.65, 10.66, 10.61, 10.51, 10.51, 10.54, 12.03, 10.49, 10.55, 10.59, 10.56, 10.64, 10.67, 10.46, 10.55, 10.62, 17.01, 10.53, 10.57, 10.61, 10.66, 17.62, 10.6, 10.53, 10.57, 10.54, 10.54, 10.53, 17.41, 17.66, 11.8, 17.94, 16.33, 11.88, 10.6, 10.55, 10.47, 10.52, 10.54, 10.45, 10.53, 10.52, 15.96, 10.49, 10.54, 10.58, 15.92, 15.34, 10.51, 10.48, 10.52, 10.48, 10.39, 10.39, 10.46, 10.62, 10.45, 10.48, 10.56, 10.4, 10.46, 10.51, 10.53, 10.44, 10.44, 10.52, 10.46, 10.5, 11.93, 10.52, 10.55, 11.91, 10.47, 10.42, 10.47, 10.48, 10.49, 10.48, 10.48, 17.53, 14.99, 17.84, 17.25, 11.8, 10.45, 11.38, 10.47, 10.46, 10.51, 18.68, 17.9, 11.95, 18.46, 17.18, 19.15, 17.12, 10.37, 10.39, 10.43, 17.49, 10.44, 10.27, 10.4, 10.39, 10.38, 10.43, 10.47]
    #extraer_altura_base(listapuntos)
    pass
